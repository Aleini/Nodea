// ***********************************************
// This example commands.js shows you how to
// create various custom commands and overwrite
// existing commands.
//
// For more comprehensive examples of custom
// commands please read more here:
// https://on.cypress.io/custom-commands
// ***********************************************

const { handleInput, randomString } = require("./helpers");

Cypress.Commands.add('login', (login, password) => {
	cy.session([login, password], () => {
		cy.request({
			method: 'POST',
			url: '/login',
			body: {
				login,
				password
			},
		}).then(({
			body
		}) => {
			window.localStorage.setItem('authToken', body.token)
		})
	})
})

Cypress.Commands.add('fillForm', (form_selector, attributes, relations) => {
	cy.get(form_selector).within(_ => {
		cy.get('input, textarea, select, .address_component').each(($el, index, $list) => {
			let input_type = $el.attr('type') || $el.prop('nodeName');
			input_type = input_type.toLowerCase();

			if(input_type == 'button' || $el.attr('readonly') || $el.attr('disabled'))
				return;

			// Input search generated by the select2
			if(input_type == 'select')
				if($el.attr('multiple'))
					input_type = 'select2_multiple';
				else
					input_type = 'select2';

			const css_class = $el.attr('class');
			let attr_type, nodea_type, type_param;
			const field = $el.parents('div[data-field]').attr('data-field');
			const relation = relations.find(x => x.as == $el.attr('name'));

			// Check if it's the right input about the specified attributes in div data-field
			if(field && field == $el.attr('name') && attributes[field]) {
				// Field is defined in models
				attr_type = attributes[field].type;
				nodea_type = attributes[field].nodeaType;
				type_param = attributes[field].type_parameter;
				handleInput($el, input_type, nodea_type || attr_type, type_param);
			} else if(relation) {
				handleInput($el, input_type, relation.structureType);
			} else if(css_class && css_class.includes('address_component')) {
				handleInput($el, null, 'address_component');
			} else if($el.is(':visible')) {
				const is_component_address = $el.parents('.address_component').length;
				if(is_component_address)
					return;
				// In case of not an input that is about a model attributes, we care only abour visible input
				handleInput($el, input_type, input_type);
			}
		});
	})
})

Cypress.Commands.add('testDatatable', (datatable_selector) => {
	cy.get(datatable_selector).within(_ => {
		// Try click on next pagination
		cy.get('.dataTables_paginate').find('li.next').click();

		// Test all column th, should trigger order by
		cy.get('thead.main th').not('th[data-type="show"],th[data-type="update"],th[data-type="delete"]').then($th => {
			for (let i = 0; i < $th.length; i++)
				cy.wait(250).get('thead.main th').not('th[data-type="show"],th[data-type="update"],th[data-type="delete"]').eq(i).click().wait(250).click();
		})

		// Test all search filters
		cy.get('thead.filters th').then($th => {
			let cpt = 0;
			for (let i = 0; i < $th.length; i++) {
				if($th.eq(i).find('input').length > 0) {
					cy.wait(250).get('input').eq(cpt).type(randomString(5), {
						force: true
					}).wait(250).clear();
					cpt++;
				}
			}
		})
	})
})

Cypress.Commands.add('handleHasOneTab', (tab, tab_relation, attributes, relations) => {
	const url_entity = tab_relation.target.substring(2);
	cy.wrap(tab).should('be.visible').within(_ => {
		// Delete element if exist
		if (tab.find(`form[action="/${url_entity}/delete"].ajax`).length > 0)
			tab.find(`form[action="/${url_entity}/delete"].ajax`).submit();

		// Trigger create form
		cy.get('.ajax.btn-success').click();
		cy.get(`form[action="/${url_entity}/create"].ajax`).should('be.visible');
		cy.fillForm(`form[action="/${url_entity}/create"].ajax`, attributes, relations);
		cy.get(`form[action="/${url_entity}/create"].ajax`).submit();

		// Test creation result display
		cy.get('.ajax-content #fields').should('be.visible');
		cy.get('.ajax-content').find('.btn.btn-warning').should('be.visible');
		cy.get('.ajax-content').find('.btn.btn-danger').should('be.visible');

		// Trigger update form
		cy.get('.ajax-content').find('a.ajax.btn-warning').click();
		cy.get(`form[action="/${url_entity}/update"].ajax`).should('be.visible');
		cy.fillForm(`form[action="/${url_entity}/update"].ajax`, attributes, relations);
		cy.get(`form[action="/${url_entity}/update"].ajax`).submit();

		// Test creation result display
		cy.get('.ajax-content #fields').should('be.visible');
		cy.get('.ajax-content').find('.btn.btn-warning').should('be.visible');
		cy.get('.ajax-content').find('.btn.btn-danger').should('be.visible');
	});
})

Cypress.Commands.add('handleHasManyTab', (tab, tab_relation, attributes, relations) => {
	const url_entity = tab_relation.target.substring(2);
	cy.wrap(tab).should('be.visible').wait(500).within(_ => {
		// Delete elements if exist
		if (tab.find(`form[action="/${url_entity}/delete"].ajax`).length > 0)
			for (let i = 0; i < tab.find(`form[action="/${url_entity}/delete"].ajax`).length; i++)
				cy.get(`form[action="/${url_entity}/delete"].ajax`).find('button.btn-danger').last().click({
					force: true
				}).wait(500);

		if(tab.find('table.dataTable').length > 0) {
			cy.get('table.dataTable').should('be.visible');
			cy.get('table.dataTable').find('tbody tr').should('have.length', 1);

			if(tab_relation.isFileStorage || tab.find('.ajax.btn-success').length > 0) {
				// Trigger create form
				if(!tab_relation.isFileStorage)
					cy.get('.ajax.btn-success').click({
						force: true
					});

				cy.get(`form[action="/${url_entity}/create"].ajax`).should('be.visible');
				cy.fillForm(`form[action="/${url_entity}/create"].ajax`, attributes, relations);
				cy.get(`form[action="/${url_entity}/create"].ajax`).submit();
			}

			// Test display
			cy.wait(500);
			cy.get('table.dataTable').find('tbody').then($tbody => {
				if($tbody.find('a.btn-show').length > 0){
					$tbody.find('a.btn-show').first().click();
					cy.get('.btn.btn-default.cancel').click();
				}
			})

			// Test update
			cy.wait(500);
			cy.get('table.dataTable').find('tbody').then($tbody => {
				if($tbody.find('.btn-warning').length > 0){
					$tbody.find('.btn-warning').parent().first().click();
					cy.get(`form[action="/${url_entity}/update"].ajax`).should('be.visible');
					cy.fillForm(`form[action="/${url_entity}/update"].ajax`, attributes, relations);
					cy.get(`form[action="/${url_entity}/update"].ajax`).submit();
				}
			})
		}
	});
})